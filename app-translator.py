#!/usr/bin/env python3
"""
Script para traduzir texto do clipboard automaticamente.
Traduz o texto copiado para portugu√™s brasileiro.
O texto traduzido fica na mem√≥ria de texto copiado do computador - clipboard.
Basta fazer um ctrl + v depois de rodar o script para colar a tradu√ß√£o.
"""

import pyperclip
from googletrans import Translator
import logging
import sys
from typing import Optional

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class ClipboardTranslator:
    """Classe para gerenciar tradu√ß√£o de texto do clipboard."""
    
    def __init__(self, target_language: str = 'pt'):
        """
        Inicializa o tradutor.
        
        Args:
            target_language: Idioma de destino (padr√£o: 'pt' para portugu√™s)
        """
        self.translator = Translator()
        self.target_language = target_language
    
    def get_clipboard_text(self) -> Optional[str]:
        """
        Obt√©m texto do clipboard.
        
        Returns:
            Texto do clipboard ou None se houver erro
        """
        try:
            text = pyperclip.paste()
            if not text or not text.strip():
                logger.warning("Clipboard est√° vazio ou cont√©m apenas espa√ßos em branco")
                return None
            return text.strip()
        except Exception as e:
            logger.error(f"Erro ao acessar clipboard: {e}")
            return None
    
    def translate_text(self, text: str) -> Optional[str]:
        """
        Traduz o texto para o idioma de destino.
        
        Args:
            text: Texto a ser traduzido
            
        Returns:
            Texto traduzido ou None se houver erro
        """
        try:
            # Detectar idioma do texto original
            detection = self.translator.detect(text)
            source_lang = detection.lang
            
            logger.info(f"Idioma detectado: {source_lang}")
            
            # Se o texto j√° est√° no idioma de destino, n√£o traduzir
            if source_lang == self.target_language:
                logger.info("Texto j√° est√° no idioma de destino")
                return text
            
            # Realizar tradu√ß√£o
            result = self.translator.translate(text, dest=self.target_language, src=source_lang)
            return result.text
            
        except Exception as e:
            logger.error(f"Erro na tradu√ß√£o: {e}")
            return None
    
    def copy_to_clipboard(self, text: str) -> bool:
        """
        Copia texto para o clipboard.
        
        Args:
            text: Texto a ser copiado
            
        Returns:
            True se sucesso, False caso contr√°rio
        """
        try:
            pyperclip.copy(text)
            logger.info("Texto traduzido copiado para o clipboard")
            return True
        except Exception as e:
            logger.error(f"Erro ao copiar para clipboard: {e}")
            return False
    
    def translate_clipboard(self, copy_result: bool = True) -> bool:
        """
        Fun√ß√£o principal que traduz o conte√∫do do clipboard.
        
        Args:
            copy_result: Se True, copia a tradu√ß√£o de volta para o clipboard
            
        Returns:
            True se a tradu√ß√£o foi bem-sucedida, False caso contr√°rio
        """
        # Obter texto do clipboard
        original_text = self.get_clipboard_text()
        if not original_text:
            print("‚ùå N√£o foi poss√≠vel obter texto do clipboard")
            return False
        
        print(f"üìã Texto original ({len(original_text)} caracteres):")
        print(f"   {original_text[:100]}{'...' if len(original_text) > 100 else ''}")
        print()
        
        # Traduzir texto
        translated_text = self.translate_text(original_text)
        if not translated_text:
            print("‚ùå N√£o foi poss√≠vel traduzir o texto")
            return False
        
        print(f"üåê Texto traduzido:")
        print(f"   {translated_text}")
        print()
        
        # Copiar resultado para clipboard se solicitado
        if copy_result:
            if self.copy_to_clipboard(translated_text):
                print("‚úÖ Tradu√ß√£o copiada para o clipboard!")
            else:
                print("‚ö†Ô∏è  Tradu√ß√£o realizada, mas n√£o foi poss√≠vel copiar para o clipboard")
        
        return True


def main():
    """Fun√ß√£o principal do script."""
    print("üî§ Tradutor de Clipboard")
    print("=" * 50)
    
    try:
        # Criar inst√¢ncia do tradutor
        translator = ClipboardTranslator(target_language='pt')
        
        # Executar tradu√ß√£o
        success = translator.translate_clipboard(copy_result=True)
        
        if success:
            print("\n‚ú® Tradu√ß√£o conclu√≠da com sucesso!")
        else:
            print("\n‚ùå Falha na tradu√ß√£o")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Opera√ß√£o cancelada pelo usu√°rio")
        sys.exit(0)
    except Exception as e:
        logger.error(f"Erro inesperado: {e}")
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()